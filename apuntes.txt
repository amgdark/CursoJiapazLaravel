Descargar proyecto de Github
git clone https://github.com/amgdark/CursoJiapazLaravel.git

git clone https://github.com/amgdark/CursoJiapazLaravel.git

composer update
cp .env.example .env
php artisan key:generate

realizar configuraciones de BD
php artisan migrate



Poner en boostrap los errores

Buscar todas las validaciones creadas por laravel 


Crear una clase especial para los Request y validar
	make:request
	poner la importanción y remplazar el request en el controlador


Responses
	regresar un contenido, un código y un ->header ->cookie
	regresar un json
		response()->json(['data' => $data], estatus)->header

	redirect('ruta')
	redirect()->route('saludos')

	variable sesión
		redirect()->route('saludos')->with('info','rollo')

		en la página redireccionada verificar la variable (las variables sólo está disponible en el siguiente request)
			@if(session()->has('info'))
				{{ session('info') }}

		back()->->with('info','rollo') // regresa a la ruta que lo mandó llamar


Variables de entorno config -> .env

Base de datos:
	config->database.php
	agregar las credenciales en env para la BD
	crear un BD 

	migraciones -> control de versiones
	mirgaciones por defecto
		métodos up y down

	migrate -> ejecuta las migraciones método up
	migrate:rollback -> ejecuta las migraciones método down

	crear migración para mensajes
		make: migration crea_tabla_mensaje --create=mensajes
			$table->string('nombre')    //todos los tipos de campos en documentación
			$table->string('mail')    //todos los tipos de campos en documentación
			$table->text('mensaje')    //todos los tipos de campos en documentación

		migrate
		
		para agregar algún campo extra o modificar, se tendría que agregar en el método up, ahcer un rollback y enseguida un migrate (esto borra los datos)

		agregar otra migración con el nombre agrega_telefono_mensaje (--table=mensaje) -> esto no afecta los datos
			agregar el campo()->nullable() en up y eliminarlo en down(dropColumn('campo'))
			realizar migrate
			-----
			realizar un rollback
			mover el campo()->after('mail') // buscar todos los modificadores
			realizar un migrate

		migrate:refresh --> primero hacer rollback y luego migrate (elimina datos)


	Arquitectura REST
		REpresentational State Transfer -> definen el comportamiento entre cliente y servidores utilizando recursos. Un recurso es infomración de la BD, se trata de definir URL de manera específica que responde a direfentes tipos de peticiones HTTP (métodos)

		Los navegadores solo reconocen POST y GET, para los demas métodos enviaremos un campo hidden con el nombre del método

		make:controller -h 
		make:controller --resource --> todos los métodos de un recurso

		crear las rutas
			en los nombres usar la convención nombre_recurso.método (mensajes.create)



Reestablecer la cuenta de root de mysql
	sudo service mysql stop
	sudo mysqld_safe --skip-grant-tables --skip-networking &
	mysql -u root
	FLUSH PRIVILEGES;
	CREATE USER 'root'@'%' IDENTIFIED BY 'root';
	GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
	exit;
	fg
	control+c
	sudo service start mysql
	mysql -u root -p



ORM
Object-Relational Mapping
 
Tabla = medicos -> Objeto = Medico 

make:model -> se nombran igual a la tabla asociada pero en singular y con Mayuscula la primera

Index -> importar modelo App\Medico

	si el nombre de la tabla no va conforme a las especificación se agrega en el modelo -> protected $tabla="nombre"

	Medicos::all()
	Medicos::find()
	Medicos::findOrfail()
	$medico->update()
	$medico->delete()
		Personalizar los errores -> crear dir errors en views -> 404.blade.php

$request['fecha_nac'] = date('Y-m-d', strtotime($request->input('fecha_nac')));

Login:

	make:auth -> genera rutas, controlador y vistas para el registro, login y reestablecer contraseñas
		-> revisar las rutas creadas, como personalizar
		-> revisar controladores -> los traits utilizados, sobrescribir algún método
		-> revisar views, modificar
		-> agregar middleware auth para redireccionar peticiones si no estás logueado
		-> agregar links de logout a layaout -> sobreescribir el método loggedOut para redireccionar a login

 

Enviar un mail

	Después de validar y guardar en la BD, se crea un FACADE de MAIL --> Illuminate\Support\Facades\Mail;
	make:mail MailRecibido -> lo crea en app/mail ->método build para settear la vista (crear carpeta mails en views)
	Mail::to('example@asda.es')->send(new Mailable)

	Configurar credenciales de correo en .env
	Para confgigura from, se puede hacer en config/mail.php o en el mismo .env
	Subject puede ser una propiedad del Mailable -> public $subject=""
	Se pueden enviar parámetros por medio del Mailable  -> new MailRecibido($mensaje), la propiedad dentro del mailable debe ser publica y se settea por medio del constructor

	
Roles:
	En la migración de usuarios, se agrega un campo para la llave ($table->integer('role_id'))
	Crear modelo de Role junto con su. migración -> make:model Role -m
		string('clave')->unique() //admin
		string('nombre') //Administrador

		si queremos ver todos los usuarios que tiene un rol, debemos crear una función
			function user(){
				return $this->hasOne(User::class); ->hasMany()
			}


	Model User
		crear funcion para validar el rol -> tieneRol($rol) return ($this->role->name === $rol)?true:false;
		crear funcion role() para asignar la llave foranea --> return $this->belongsTo(Role:class), relación
		visualizar el rol de un usuario -> user->role->nombre_rol;

	Middleware
		Crear un middleware -> make:middleware Roles
		En la función handle agregar el parámetro rol
			if (auth()->user()->tieneRol($rol))
				return $next($request);
			return redirect()

		Agregar al kernel con un nombre asociado

	Contralador:
		Agregar el middleware Roles en el constructor, $this->middleware('roles:admin,'['only'=>'index'])

	Crear una ruta para probar las relaciones hasOne y hasMany

	ManyToMany
		de la tabla user quitar $table->integer('role_id') --> fresh


Paginación
	Regresamos del index toda la info en forma de json
	para regresar la paginación en lugar de get se usa paginate(cantidad) o simplePaginate(cantidad)
	para mostrar los links de navegación es en la vista después de for, {!! $registros->links() !!}





Personalizar Nombre de campos en los mensajes de error
	es -> validation -> attributes
Traducción de strings estáticos
	es -> crear es.json {'Send':"Enviar"} -> @('Send')
	App:setLocale('es')

	Cambiar los verbos del resource AppServiceProvider->boot(Route::resourceVerbs([
             'create' => __('create'),
             'edit' => __('edit'),
         ]);)


Sockets
	Ver imganes
	Crear un evento make:event MedicoAgregado
	camiar el canal a publico PrivateChannel -> Channel, implementar la interfaz ShouldBroadcast
	en el controlador de Médicos@store lanzar un evento event(new MensajeRecibido($mensjae))

	config->broadcasting.php poner el driver redis

	instalar el paquete predis/predis -> composer require predis/predis


Angular
	sudo apt-get update
	sudo apt-get install curl
	Instalar Node
		curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -
		sudo apt-get install -y nodejs
	Instalar TypeScript
		sudo npm install -g typescript
	Instalar angular-cli
		sudo npm install -g @angular/cli

	Instalar plugins visual code


	Sincronizar www-data vagrant

	TypeScript
		Ventajas
		tsc archivo
		tsc archivo -w
		tsc -init
		tsc -w

		let VS var
		const 
		tipos de datos nomVar:string
			number,Date, any, Objetos -> tiene que tener la misma estructura
		template literales `` agregar código js ${ alert('hola') }
		funciones, parámetros obligatorios y opcionales nombre:string="Invitado", apellido?:string
		funciones flecha vs funciones normales
		Extrer de objectos let objeto={nombre:"hola"....}, let {nombre,...} = objeto 
		Extrer de arreglos let colores=["azul","morado"....], let [color1, color2,...] = colores 

		Clases, propiedades, constructores, funciones, constructor(public)

		promesas, dan la posibilidad de realizar una tarea asincrona

		decoradores
			Son funciones que extienden la funcionalidad de una clase, propiedad, función, parámetro etc.


	Angular
		Componentes son pequeñas clases que cumplen con una función específica tienen un decorador
			navbar
			sidebar
			footer
			responsable de mostrar contenido


	Directivas estructurales
		Son instrucciones que le dicen al HTML como se tiene que comportar
			ngif
			ngfor




